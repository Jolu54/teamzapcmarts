{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\nvar _immutabilityHelper = _interopRequireDefault(require(\"immutability-helper\"));\nvar LaneHelper = {\n  initialiseLanes: function initialiseLanes(state, _ref) {\n    var lanes = _ref.lanes;\n    var newLanes = lanes.map(function (lane) {\n      lane.currentPage = 1;\n      lane.cards && lane.cards.forEach(function (c) {\n        return c.laneId = lane.id;\n      });\n      return lane;\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  paginateLane: function paginateLane(state, _ref2) {\n    var laneId = _ref2.laneId,\n      newCards = _ref2.newCards,\n      nextPage = _ref2.nextPage;\n    var updatedLanes = LaneHelper.appendCardsToLane(state, {\n      laneId: laneId,\n      newCards: newCards\n    });\n    updatedLanes.find(function (lane) {\n      return lane.id === laneId;\n    }).currentPage = nextPage;\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: updatedLanes\n      }\n    });\n  },\n  appendCardsToLane: function appendCardsToLane(state, _ref3) {\n    var laneId = _ref3.laneId,\n      newCards = _ref3.newCards,\n      index = _ref3.index;\n    var lane = state.lanes.find(function (lane) {\n      return lane.id === laneId;\n    });\n    newCards = newCards.map(function (c) {\n      return (0, _immutabilityHelper.default)(c, {\n        laneId: {\n          $set: laneId\n        }\n      });\n    }).filter(function (c) {\n      return lane.cards.find(function (card) {\n        return card.id === c.id;\n      }) == null;\n    });\n    return state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        if (index !== undefined) {\n          return (0, _immutabilityHelper.default)(lane, {\n            cards: {\n              $splice: [[index, 0].concat(_toConsumableArray(newCards))]\n            }\n          });\n        } else {\n          var cardsToUpdate = [].concat(_toConsumableArray(lane.cards), _toConsumableArray(newCards));\n          return (0, _immutabilityHelper.default)(lane, {\n            cards: {\n              $set: cardsToUpdate\n            }\n          });\n        }\n      } else {\n        return lane;\n      }\n    });\n  },\n  appendCardToLane: function appendCardToLane(state, _ref4) {\n    var laneId = _ref4.laneId,\n      card = _ref4.card,\n      index = _ref4.index;\n    var newLanes = LaneHelper.appendCardsToLane(state, {\n      laneId: laneId,\n      newCards: [card],\n      index: index\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  addLane: function addLane(state, lane) {\n    var newLane = (0, _objectSpread2.default)({\n      cards: []\n    }, lane);\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $push: [newLane]\n      }\n    });\n  },\n  updateLane: function updateLane(state, updatedLane) {\n    var newLanes = state.lanes.map(function (lane) {\n      if (updatedLane.id == lane.id) {\n        return (0, _objectSpread2.default)({}, lane, updatedLane);\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: newLanes\n      }\n    });\n  },\n  removeCardFromLane: function removeCardFromLane(state, _ref5) {\n    var laneId = _ref5.laneId,\n      cardId = _ref5.cardId;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        var newCards = lane.cards.filter(function (card) {\n          return card.id !== cardId;\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: newCards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  moveCardAcrossLanes: function moveCardAcrossLanes(state, _ref6) {\n    var fromLaneId = _ref6.fromLaneId,\n      toLaneId = _ref6.toLaneId,\n      cardId = _ref6.cardId,\n      index = _ref6.index;\n    var cardToMove = null;\n    var interimLanes = state.lanes.map(function (lane) {\n      if (lane.id === fromLaneId) {\n        cardToMove = lane.cards.find(function (card) {\n          return card.id === cardId;\n        });\n        var newCards = lane.cards.filter(function (card) {\n          return card.id !== cardId;\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: newCards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    var updatedState = (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: interimLanes\n      }\n    });\n    return LaneHelper.appendCardToLane(updatedState, {\n      laneId: toLaneId,\n      card: cardToMove,\n      index: index\n    });\n  },\n  updateCardsForLane: function updateCardsForLane(state, _ref7) {\n    var laneId = _ref7.laneId,\n      cards = _ref7.cards;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: cards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  updateCardForLane: function updateCardForLane(state, _ref8) {\n    var laneId = _ref8.laneId,\n      updatedCard = _ref8.card;\n    var lanes = state.lanes.map(function (lane) {\n      if (lane.id === laneId) {\n        var cards = lane.cards.map(function (card) {\n          if (card.id === updatedCard.id) {\n            return (0, _objectSpread2.default)({}, card, updatedCard);\n          } else {\n            return card;\n          }\n        });\n        return (0, _immutabilityHelper.default)(lane, {\n          cards: {\n            $set: cards\n          }\n        });\n      } else {\n        return lane;\n      }\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: lanes\n      }\n    });\n  },\n  updateLanes: function updateLanes(state, lanes) {\n    return (0, _objectSpread2.default)({}, state, {\n      lanes: lanes\n    });\n  },\n  moveLane: function moveLane(state, _ref9) {\n    var oldIndex = _ref9.oldIndex,\n      newIndex = _ref9.newIndex;\n    var laneToMove = state.lanes[oldIndex];\n    var tempState = (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $splice: [[oldIndex, 1]]\n      }\n    });\n    return (0, _immutabilityHelper.default)(tempState, {\n      lanes: {\n        $splice: [[newIndex, 0, laneToMove]]\n      }\n    });\n  },\n  removeLane: function removeLane(state, _ref10) {\n    var laneId = _ref10.laneId;\n    var updatedLanes = state.lanes.filter(function (lane) {\n      return lane.id !== laneId;\n    });\n    return (0, _immutabilityHelper.default)(state, {\n      lanes: {\n        $set: updatedLanes\n      }\n    });\n  }\n};\nvar _default = LaneHelper;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}