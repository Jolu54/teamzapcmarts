{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _assertThisInitialized = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _inherits = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createSuper = require(\"/home/deploy/teamzap/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _redux = require(\"redux\");\nvar _reactRedux = require(\"react-redux\");\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _cloneDeep = _interopRequireDefault(require(\"lodash/cloneDeep\"));\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\nvar _v = _interopRequireDefault(require(\"uuid/v1\"));\nvar _Container = _interopRequireDefault(require(\"../dnd/Container\"));\nvar _Draggable = _interopRequireDefault(require(\"../dnd/Draggable\"));\nvar laneActions = _interopRequireWildcard(require(\"../actions/LaneActions\"));\nvar Lane = /*#__PURE__*/function (_react$Component) {\n  _inherits(Lane, _react$Component);\n  var _super = _createSuper(Lane);\n  function Lane() {\n    var _this;\n    _classCallCheck(this, Lane);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"state\", {\n      loading: false,\n      currentPage: _this.props.currentPage,\n      addCardMode: false,\n      collapsed: false,\n      isDraggingOver: false\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"handleScroll\", function (evt) {\n      var node = evt.target;\n      var elemScrollPosition = node.scrollHeight - node.scrollTop - node.clientHeight;\n      var onLaneScroll = _this.props.onLaneScroll; // In some browsers and/or screen sizes a decimal rest value between 0 and 1 exists, so it should be checked on < 1 instead of < 0\n\n      if (elemScrollPosition < 1 && onLaneScroll && !_this.state.loading) {\n        var currentPage = _this.state.currentPage;\n        _this.setState({\n          loading: true\n        });\n        var nextPage = currentPage + 1;\n        onLaneScroll(nextPage, _this.props.id).then(function (moreCards) {\n          if ((moreCards || []).length > 0) {\n            _this.props.actions.paginateLane({\n              laneId: _this.props.id,\n              newCards: moreCards,\n              nextPage: nextPage\n            });\n          }\n          _this.setState({\n            loading: false\n          });\n        });\n      }\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"laneDidMount\", function (node) {\n      if (node) {\n        node.addEventListener('scroll', _this.handleScroll);\n      }\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"removeCard\", function (cardId) {\n      if (_this.props.onBeforeCardDelete && typeof _this.props.onBeforeCardDelete === 'function') {\n        _this.props.onBeforeCardDelete(function () {\n          _this.props.onCardDelete && _this.props.onCardDelete(cardId, _this.props.id);\n          _this.props.actions.removeCard({\n            laneId: _this.props.id,\n            cardId: cardId\n          });\n        });\n      } else {\n        _this.props.onCardDelete && _this.props.onCardDelete(cardId, _this.props.id);\n        _this.props.actions.removeCard({\n          laneId: _this.props.id,\n          cardId: cardId\n        });\n      }\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"handleCardClick\", function (e, card) {\n      var onCardClick = _this.props.onCardClick;\n      onCardClick && onCardClick(card.id, card.metadata, card.laneId);\n      e.stopPropagation();\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"showEditableCard\", function () {\n      _this.setState({\n        addCardMode: true\n      });\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"hideEditableCard\", function () {\n      _this.setState({\n        addCardMode: false\n      });\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"addNewCard\", function (params) {\n      var laneId = _this.props.id;\n      var id = (0, _v.default)();\n      _this.hideEditableCard();\n      var card = (0, _objectSpread2.default)({\n        id: id\n      }, params);\n      _this.props.actions.addCard({\n        laneId: laneId,\n        card: card\n      });\n      _this.props.onCardAdd(card, laneId);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"onDragStart\", function (_ref) {\n      var payload = _ref.payload;\n      var handleDragStart = _this.props.handleDragStart;\n      handleDragStart && handleDragStart(payload.id, payload.laneId);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"shouldAcceptDrop\", function (sourceContainerOptions) {\n      return _this.props.droppable && sourceContainerOptions.groupName === _this.groupName;\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"onDragEnd\", function (laneId, result) {\n      var handleDragEnd = _this.props.handleDragEnd;\n      var addedIndex = result.addedIndex,\n        payload = result.payload;\n      if (_this.state.isDraggingOver) {\n        _this.setState({\n          isDraggingOver: false\n        });\n      }\n      if (addedIndex != null) {\n        var newCard = (0, _objectSpread2.default)({}, (0, _cloneDeep.default)(payload), {\n          laneId: laneId\n        });\n        var response = handleDragEnd ? handleDragEnd(payload.id, payload.laneId, laneId, addedIndex, newCard) : true;\n        if (response === undefined || !!response) {\n          _this.props.actions.moveCardAcrossLanes({\n            fromLaneId: payload.laneId,\n            toLaneId: laneId,\n            cardId: payload.id,\n            index: addedIndex\n          });\n          _this.props.onCardMoveAcrossLanes(payload.laneId, laneId, payload.id, addedIndex);\n        }\n        return response;\n      }\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"updateCard\", function (updatedCard) {\n      _this.props.actions.updateCard({\n        laneId: _this.props.id,\n        card: updatedCard\n      });\n      _this.props.onCardUpdate(_this.props.id, updatedCard);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"renderDragContainer\", function (isDraggingOver) {\n      var _this$props = _this.props,\n        id = _this$props.id,\n        cards = _this$props.cards,\n        laneSortFunction = _this$props.laneSortFunction,\n        editable = _this$props.editable,\n        hideCardDeleteIcon = _this$props.hideCardDeleteIcon,\n        cardDraggable = _this$props.cardDraggable,\n        cardDragClass = _this$props.cardDragClass,\n        cardDropClass = _this$props.cardDropClass,\n        tagStyle = _this$props.tagStyle,\n        cardStyle = _this$props.cardStyle,\n        components = _this$props.components,\n        t = _this$props.t;\n      var _this$state = _this.state,\n        addCardMode = _this$state.addCardMode,\n        collapsed = _this$state.collapsed;\n      var showableCards = collapsed ? [] : cards;\n      var cardList = _this.sortCards(showableCards, laneSortFunction).map(function (card, idx) {\n        var onDeleteCard = function onDeleteCard() {\n          return _this.removeCard(card.id);\n        };\n        var cardToRender = _react.default.createElement(components.Card, (0, _extends2.default)({\n          key: card.id,\n          index: idx,\n          style: card.style || cardStyle,\n          className: \"react-trello-card\",\n          onDelete: onDeleteCard,\n          onClick: function onClick(e) {\n            return _this.handleCardClick(e, card);\n          },\n          onChange: function onChange(updatedCard) {\n            return _this.updateCard(updatedCard);\n          },\n          showDeleteButton: !hideCardDeleteIcon,\n          tagStyle: tagStyle,\n          cardDraggable: cardDraggable,\n          editable: editable,\n          t: t\n        }, card));\n        return cardDraggable && (!card.hasOwnProperty('draggable') || card.draggable) ? _react.default.createElement(_Draggable.default, {\n          key: card.id\n        }, cardToRender) : _react.default.createElement(\"span\", {\n          key: card.id\n        }, cardToRender);\n      });\n      return _react.default.createElement(components.ScrollableLane, {\n        ref: _this.laneDidMount,\n        isDraggingOver: isDraggingOver\n      }, _react.default.createElement(_Container.default, {\n        orientation: \"vertical\",\n        groupName: _this.groupName,\n        dragClass: cardDragClass,\n        dropClass: cardDropClass,\n        onDragStart: _this.onDragStart,\n        onDrop: function onDrop(e) {\n          return _this.onDragEnd(id, e);\n        },\n        onDragEnter: function onDragEnter() {\n          return _this.setState({\n            isDraggingOver: true\n          });\n        },\n        onDragLeave: function onDragLeave() {\n          return _this.setState({\n            isDraggingOver: false\n          });\n        },\n        shouldAcceptDrop: _this.shouldAcceptDrop,\n        getChildPayload: function getChildPayload(index) {\n          return _this.props.getCardDetails(id, index);\n        }\n      }, cardList), editable && !addCardMode && _react.default.createElement(components.AddCardLink, {\n        onClick: _this.showEditableCard,\n        t: t,\n        laneId: id\n      }), addCardMode && _react.default.createElement(components.NewCardForm, {\n        onCancel: _this.hideEditableCard,\n        t: t,\n        laneId: id,\n        onAdd: _this.addNewCard\n      }));\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"removeLane\", function () {\n      var id = _this.props.id;\n      _this.props.actions.removeLane({\n        laneId: id\n      });\n      _this.props.onLaneDelete(id);\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"updateTitle\", function (value) {\n      _this.props.actions.updateLane({\n        id: _this.props.id,\n        title: value\n      });\n      _this.props.onLaneUpdate(_this.props.id, {\n        title: value\n      });\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"renderHeader\", function (pickedProps) {\n      var components = _this.props.components;\n      return _react.default.createElement(components.LaneHeader, (0, _extends2.default)({}, pickedProps, {\n        onDelete: _this.removeLane,\n        onDoubleClick: _this.toggleLaneCollapsed,\n        updateTitle: _this.updateTitle\n      }));\n    });\n    (0, _defineProperty2.default)(_assertThisInitialized(_this), \"toggleLaneCollapsed\", function () {\n      _this.props.collapsibleLanes && _this.setState(function (state) {\n        return {\n          collapsed: !state.collapsed\n        };\n      });\n    });\n    return _this;\n  }\n  _createClass(Lane, [{\n    key: \"sortCards\",\n    value: function sortCards(cards, sortFunction) {\n      if (!cards) return [];\n      if (!sortFunction) return cards;\n      return cards.concat().sort(function (card1, card2) {\n        return sortFunction(card1, card2);\n      });\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!(0, _isEqual.default)(this.props.cards, nextProps.cards)) {\n        this.setState({\n          currentPage: nextProps.currentPage\n        });\n      }\n    }\n  }, {\n    key: \"groupName\",\n    get: function get() {\n      var boardId = this.props.boardId;\n      return \"TrelloBoard\".concat(boardId, \"Lane\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n        loading = _this$state2.loading,\n        isDraggingOver = _this$state2.isDraggingOver,\n        collapsed = _this$state2.collapsed;\n      var _this$props2 = this.props,\n        id = _this$props2.id,\n        cards = _this$props2.cards,\n        collapsibleLanes = _this$props2.collapsibleLanes,\n        components = _this$props2.components,\n        onLaneClick = _this$props2.onLaneClick,\n        onLaneScroll = _this$props2.onLaneScroll,\n        onCardClick = _this$props2.onCardClick,\n        onCardAdd = _this$props2.onCardAdd,\n        onBeforeCardDelete = _this$props2.onBeforeCardDelete,\n        onCardDelete = _this$props2.onCardDelete,\n        onLaneDelete = _this$props2.onLaneDelete,\n        onLaneUpdate = _this$props2.onLaneUpdate,\n        onCardUpdate = _this$props2.onCardUpdate,\n        onCardMoveAcrossLanes = _this$props2.onCardMoveAcrossLanes,\n        otherProps = (0, _objectWithoutProperties2.default)(_this$props2, [\"id\", \"cards\", \"collapsibleLanes\", \"components\", \"onLaneClick\", \"onLaneScroll\", \"onCardClick\", \"onCardAdd\", \"onBeforeCardDelete\", \"onCardDelete\", \"onLaneDelete\", \"onLaneUpdate\", \"onCardUpdate\", \"onCardMoveAcrossLanes\"]);\n      var allClassNames = (0, _classnames.default)('react-trello-lane', this.props.className || '');\n      var showFooter = collapsibleLanes && cards.length > 0;\n      return _react.default.createElement(components.Section, (0, _extends2.default)({}, otherProps, {\n        key: id,\n        onClick: function onClick() {\n          return onLaneClick && onLaneClick(id);\n        },\n        draggable: false,\n        className: allClassNames\n      }), this.renderHeader((0, _objectSpread2.default)({\n        id: id,\n        cards: cards\n      }, otherProps)), this.renderDragContainer(isDraggingOver), loading && _react.default.createElement(components.Loader, null), showFooter && _react.default.createElement(components.LaneFooter, {\n        onClick: this.toggleLaneCollapsed,\n        collapsed: collapsed\n      }));\n    }\n  }]);\n  return Lane;\n}(_react.Component);\nLane.propTypes = {\n  actions: _propTypes.default.object,\n  id: _propTypes.default.string.isRequired,\n  boardId: _propTypes.default.string,\n  title: _propTypes.default.node,\n  index: _propTypes.default.number,\n  laneSortFunction: _propTypes.default.func,\n  style: _propTypes.default.object,\n  cardStyle: _propTypes.default.object,\n  tagStyle: _propTypes.default.object,\n  titleStyle: _propTypes.default.object,\n  labelStyle: _propTypes.default.object,\n  cards: _propTypes.default.array,\n  label: _propTypes.default.string,\n  currentPage: _propTypes.default.number,\n  draggable: _propTypes.default.bool,\n  collapsibleLanes: _propTypes.default.bool,\n  droppable: _propTypes.default.bool,\n  onCardMoveAcrossLanes: _propTypes.default.func,\n  onCardClick: _propTypes.default.func,\n  onBeforeCardDelete: _propTypes.default.func,\n  onCardDelete: _propTypes.default.func,\n  onCardAdd: _propTypes.default.func,\n  onCardUpdate: _propTypes.default.func,\n  onLaneDelete: _propTypes.default.func,\n  onLaneUpdate: _propTypes.default.func,\n  onLaneClick: _propTypes.default.func,\n  onLaneScroll: _propTypes.default.func,\n  editable: _propTypes.default.bool,\n  laneDraggable: _propTypes.default.bool,\n  cardDraggable: _propTypes.default.bool,\n  cardDragClass: _propTypes.default.string,\n  cardDropClass: _propTypes.default.string,\n  canAddLanes: _propTypes.default.bool,\n  t: _propTypes.default.func.isRequired\n};\nLane.defaultProps = {\n  style: {},\n  titleStyle: {},\n  labelStyle: {},\n  label: undefined,\n  editable: false,\n  onLaneUpdate: function onLaneUpdate() {},\n  onCardAdd: function onCardAdd() {},\n  onCardUpdate: function onCardUpdate() {}\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    actions: (0, _redux.bindActionCreators)(laneActions, dispatch)\n  };\n};\nvar _default = (0, _reactRedux.connect)(null, mapDispatchToProps)(Lane);\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}